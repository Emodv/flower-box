generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  userType  UserType @default(LOCAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String         @db.LongText
  price       Float
  productId   String
  tags        Tags[]
  categories  Categories[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  assets      Asset[]
  orderItems  OrderItem[]
  interaction Interactions[]
}

model Tags {
  id        Int      @id @default(autoincrement())
  productId Int
  tag       TagsEnum @default(all)
  product   Product  @relation(fields: [productId], references: [id])
}

model Categories  {
  id        Int      @id @default(autoincrement())
  productId Int
  category  Category @default(all)
  product   Product  @relation(fields: [productId], references: [id])
}

model Asset {
  id        Int     @id @default(autoincrement())
  productId Int
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Order {
  id          Int          @id @default(autoincrement())
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderItems  OrderItem[]
  transaction Transaction?
  address     String
  deliveryDate  DateTime @default(now())
}

model Interactions {
  id        Int     @id @default(autoincrement())
  count     Int
  sells     Int
  productId Int     @unique
  product   Product @relation(fields: [productId], references: [id])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  quantity  Int
}

model Transaction {
  id        Int               @id @default(autoincrement())
  orderId   Int               @unique
  amount    Float
  status    TransactionStatus @default(FAILED)
  createdAt DateTime          @default(now())
  order     Order             @relation(fields: [orderId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

enum Category {
  all
  spring
  summer
  autumn
  winter
  romantic
  sympathy
  congratulation
  tropic
  anniversary
  bouquets
  basket
  vase
}

enum TagsEnum {
  all
  Roses
  Lilies
  Tulips
  Sunflowers
  Orchids
  Peonies
  Daisies
  Hydrangeas
  Carnations
  Chrysanthemums
  Gerberas
  Freesia
  Lavender
  Gardenias
  Ranunculus
  Alstroemeria
  Gladiolus
  Marigolds
  Violets
  Poppies
  Anemones
  Irises
  Daffodils
  Magnolias
  Jasmine
  Lilacs
  Snapdragons
  Azaleas
  Begonias
  Camellias
  Red
  Yellow
  Pink
  White
  Blue
  Orange
  Purple
  Green
  Black
  Mixed_Colors
  Fragrant
  Non_Fragrant
  Indoor
  Outdoor
  Seasonal
  Year_Round
  Exotic
  Local
  Sustainable
  Eco_Friendly
  Birthday
  Wedding
  Funeral
  Get_Well
  Im_Sorry
  Thank_You
  New_Baby
  Mother_Day
  Valentine_Day
  Christmas
  Easter
  Halloween
  Anniversary
  Congratulations
  Love_Romance
  Sympathy_Funeral
  Housewarming
  Graduation
  Retirement
  Prom
  DIY
  Bouquets
  Arrangements
  Single_Stem
  Potted
  DriedFlowers
  Artificial_Flower
}

enum UserRole {
  USER
  ADMIN
}

enum UserType {
  LOCAL
  GOOGLE_USER
  FACEBOOK_USER
}

enum OrderStatus {
  PENDING
  COMPLETED
}

enum TransactionStatus {
  FAILED
  SUCCESS
}
